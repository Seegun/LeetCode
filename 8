/**
 * @param {Function[]} functions
 * @return {Function}
 */
var compose = function(functions) {
    let reverseFunction = functions.reverse()

	return function (x) {
        let testValue = x
        reverseFunction.forEach((item) => (testValue = item(testValue)));
        return testValue;
    };
};

/**
 * const fn = compose([x => x + 1, x => 2 * x])
 * fn(4) // 9
 */


1 variant 


/**
 * @param {Function[]} functions
 * @return {Function}
 */
var compose = function(functions) {
   
	return function (x) {
        return functions.reduceRight((accumulator, item) => item(accumulator), x);
    };
};

/**
 * const fn = compose([x => x + 1, x => 2 * x])
 * fn(4) // 9
 */ 

variant 2
